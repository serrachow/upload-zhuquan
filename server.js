// Import required modules
const express = require('express');
const multer = require('multer');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
require('dotenv').config();
const {
  S3Client,
  CreateMultipartUploadCommand,
  UploadPartCommand,
  CompleteMultipartUploadCommand,
  PutObjectCommand,
} = require('@aws-sdk/client-s3');

// Initialize the app
const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/uploadDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Define FileUpload schema
const fileUploadSchema = new mongoose.Schema({
  filename: String,
  url: String, // S3 URL
  name: String,
  email: String,
  datasetName: String,
  celltypeLabel: Boolean,
  celltypeLabelText: String,
  autoGeneratedColors: Boolean,
  UNSColumn: String,
  colorsJSON: String, // Optional
  rawGeneCounts: Boolean,
  rawGeneCountsText: String,
  uploadDate: { type: Date, default: Date.now },
  uploadId: String,
  parts: [{ ETag: String, PartNumber: Number }],
});

const FileUpload = mongoose.model('FileUpload', fileUploadSchema);

// Initialize S3 client
const s3Client = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

const upload = multer({ storage: multer.memoryStorage() });

app.post('/upload', upload.fields([{ name: 'h5adFile', maxCount: 1 }, { name: 'colorsJSON', maxCount: 1 }]), async (req, res) => {
    try {
      if (!req.files || !req.files.h5adFile) return res.status(400).send('No H5AD file uploaded.');
  
      // Step 1: Get uploaded H5AD file and generate a filename
      const h5adFile = req.files.h5adFile[0];
      const filename = `${Date.now()}-${h5adFile.originalname}`;
  
      // Step 2: Start multipart upload for the H5AD file
      const startCommand = new CreateMultipartUploadCommand({
        Bucket: process.env.S3_BUCKET_NAME,
        Key: filename,
      });
      const { UploadId } = await s3Client.send(startCommand);
  
      // Step 3: Upload the file in chunks
      const parts = [];
      const chunkSize = 5 * 1024 * 1024; // 5MB per chunk
      const fileBuffer = h5adFile.buffer;
      let partNumber = 1;
  
      for (let i = 0; i < fileBuffer.length; i += chunkSize) {
        const chunk = fileBuffer.slice(i, i + chunkSize);
        const uploadPartCommand = new UploadPartCommand({
          Bucket: process.env.S3_BUCKET_NAME,
          Key: filename,
          UploadId,
          PartNumber: partNumber,
          Body: chunk,
        });
  
        const { ETag } = await s3Client.send(uploadPartCommand);
        parts.push({ ETag, PartNumber: partNumber });
        partNumber++;
      }
  
      // Step 4: Handle optional JSON file (colorsJSON)
      let colorsJSONUrl = null;
      if (req.files.colorsJSON) {
        const colorsJSONFile = req.files.colorsJSON[0];
        const colorsJSONFilename = `colors-${Date.now()}.json`;
  
        // Upload the JSON file to S3
        const jsonCommand = new PutObjectCommand({
          Bucket: process.env.S3_BUCKET_NAME,
          Key: colorsJSONFilename,
          Body: colorsJSONFile.buffer,
          ContentType: 'application/json',
        });
        await s3Client.send(jsonCommand);
  
        colorsJSONUrl = `https://${process.env.S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${colorsJSONFilename}`;
      }
  
      // Step 5: Complete the multipart upload
      const completeCommand = new CompleteMultipartUploadCommand({
        Bucket: process.env.S3_BUCKET_NAME,
        Key: filename,
        UploadId,
        MultipartUpload: { Parts: parts },
      });
      await s3Client.send(completeCommand);
  
      const fileUrl = `https://${process.env.S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${filename}`;
  
      // Step 6: Save metadata to MongoDB
      const { name, email, dataset_name, celltype_label, celltype_label_text, auto_generated_colors, UNS_column, raw_gene_counts, raw_gene_counts_text } = req.body;

      const newFileUpload = new FileUpload({
        filename,
        url: fileUrl,
        colorsJSON: colorsJSONUrl, // Optional colors JSON URL
        name,
        email,
        datasetName: dataset_name,
        celltypeLabel: celltype_label === 'on',
        celltypeLabelText: celltype_label_text || null,
        autoGeneratedColors: auto_generated_colors === 'on',
        UNSColumn: UNS_column || null,
        rawGeneCounts: raw_gene_counts === 'on',
        rawGeneCountsText: raw_gene_counts_text || null,
        uploadId: UploadId,
        parts,
      });
      await newFileUpload.save();
  
      // Return response
      res.status(200).json({ message: 'Upload completed successfully', url: fileUrl });
    } catch (err) {
      console.error(err);
      res.status(500).send('Error processing upload');
    }
  });
  

// Start the server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
